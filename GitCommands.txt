Point 1: Git installation verification commands
	$ git and enter			-- To know Git installed ot not
	$ git --version 		-- To know Git version installed

Point 2: Sync/connect git and github
    Configure your user name and e-mail ID using the following commands.
	$ git config --global user.name "ProfilenamefromGuthubaccount"
	$ git config --global user.email "drsladit.91@gmail.com"
    Verifiication command
	$ git config --list
	$ git remote -v			-- To know local and remote repos synced/connected

Point 3: Start either by cloning a repository (or) initialising a repository.
    Clone a repository from github
	$ git clone <github repository URL>
    Initialising a repository
	$ git init 		-- To initialize existing folder
	$ touch TestFile.py 	-- To create a file exixting path

Point 4: Basic commands for pushing changes to local repository
	$ git add <Filename>      -- To add file into staging
	$ git add *.py 		  -- Will add all .py files
	$ git add . 		  -- Will add all files in the folder
	$ git status 		  -- To check whether the files are in staging/local to system
	$ git rm --cached <FileName> -- TO remove file from staging to untrack file
	$ git commit 		--To commit changes to global repository with edit mode open
	$ git commit -m 'changed GitCommands.txt' - To commit a file without edit mode
	$ clear 			-- command in gitbash to clear commands

Point 5: Push changes from local to Remote repository
    a) Approach if you cloned a remote repository and then pushing changes
	$ git push
    b) Appraoch if you created a repository in Github and pushing changes from local  repo to github repo
	Step 1: $ git remote add origin <github repository URL>
	Step 2: git remote -v 		- To check remote repo name
	Step 3: $ git pull		- Pulls remote repo files to local repo
	ELSE: IF you want to pull a particular Branch files
	CMD: git pull origin origin <Branch_name: main in case of main branch>	



Point 6a: Ignoring files
    Create a <file> with format .ignorefile. Inlude file names and folder names
	Example: github-recovery-codes_1, All files in a fodler: other/*
	$ touch .gitignore - A file created, where we can give file names we want not to add to repository
	$ touch .gitkeep - usually git ignore empty directories to keep them traking use athis command

    To find out which folders and files git ignore that are defined in .gitignore file.
	$ git status --ignored

Point 6b: To get list f recent commit information
	$ git log -2 						-- displays the history of last two commits
	$ git log --oneline -3			-- Fits the log output to a single line and last 3 commits

    Other
	$ git log e3498ec27ccf0db06f09533e21e20a4da2cc691e 	-- shows the history starting from commit_id
	$ git log GitCommands.txt					-- displays the list of commits for the file
	$ git log --oneline --graph --decorate
	$ git log --stat
	$ git log --author="drsladit"
	$ git log --since=*2021-02-01* 		--Provides commits from given to till date
	$ git log --until-02-01* 			--Provides commits from given to till date
	$ git log --oneline			-- Fits the log output to a single line
	$ git log --graph 			--Gives a graphical representation to the log output



Point 7: Branches in git
	a) Creating and navigating between branches
    	$ git branch		-- To know branches of this repository & also Currently to which branch out git is pointing
	$ git brach <Name of branch to be created> 	-- To create new branch
	$ git checkout -b <branch_name> or git switch -c <branch_name> -- Creates and switches to new branch
	$ git branch checkout <branch name>	-- Move to new branch
		or
	$ git switch <branch_name>
	
	b) Push new brach from local repo to remote repo/github
	$ git push origin <branch_name>

	c) Merge a specified branch to current branch
	$ git merge <branch_name>

	d) Delete branch
	$ git branch -d <branch_name> - Delete a local branch(only if it is fully  merged)
	$ git branch -D <branch_name> - Force deletes a local branch
	$ git push origin --delete <branch_name> - Delete a remote branch
	
	e) Rename a branch
	$ git git branch -m <old_name> <new_name>

	f) list remote branches
	$ git branch -r -- lists remote branches

	

Git to Gihub and vice versa:
git remote - Gives all remote location details. Example: origin
git remote add origin https://github.com/drsladit/Github-LearningRepository.git
git pull URL - first time
git push - often
git push -u origin master
It asks for github credentials, if it doesn't login. Read error description.
Sometimes if central repository(Github in this case) is no where related or if push command used first time. then it throws error.

Then first use pull command to pull from central to local.
git pull origin master --allow-unrelated-histories and then push.

git clone URL to pull enter code


***-------- GIT CLONE & GIT PULL s--------------***
Difference between git clone and git pull(git fetch+git merge) and

---Git CLONE---
Command: git clone https://github.com/drsladit/Github-LearningRepository.git

1) If you want a copy of existing repository from github use git clone. git clone is how you get a local copy of an existing repository to work on.
2) You no need to initialise the repository when you are using git clone i.e. No need to use command git init before typing git clone URL command
3) It's usually only used once for a given repository, unless you want to have multiple working copies of it around. (Or want to get a clean copy after messing up your local one...)

---GIT PULL--

git init
git remote add origin git://github.com/cmcculloh/repo.git
git fetch --all
git pull origin master

1) git pull (or git fetch + git merge) is how you update that local copy with new commits from the remote repository. If you are collaborating with others, it is a command that you will run frequently.

As your first example shows, it is possible to emulate git clone with an assortment of other git commands, but it's not really the case that git pull is doing "basically the same thing" as git clone (or vice-versa).


***---------------------------------------***





Part 4: Git History commands
git diff 			--shows difference between recently add to staging and current file
git diff --staged  --shows changes between recent staging area to local reposit/recent commit





***--------------------------------***
Topics to learn:
merging of branches
stash
commit - git reset soft and hard
checkout
branch creation 
navigating to existing branch
branch deletion
commit - cherry picking






